{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Qt Playground","text":"<p>Playing around with Qt for learning purposes.</p> <p>Uses Qt 6 and Qt for Python, aka PySide, which includes Qt Designer, a WYSIWYG UI editor.</p>"},{"location":"#run-executable","title":"Run executable","text":"<p>If you plan on simply using the app (not doing any development), follow the instructions below in this section.</p> <ol> <li>Go to the latest release page.</li> <li>Download the file for your OS.</li> <li>Expand the downloaded Zip file and run the executable.</li> </ol>"},{"location":"#development","title":"Development","text":""},{"location":"#requirements","title":"Requirements","text":"<pre><code>pip install -r requirements-dev.txt\n</code></pre>"},{"location":"#ui","title":"UI","text":"<p><code>Qt Designer</code> is used to create the UI, which outputs a <code>.ui</code> file (XML content that describes the UI). This file is then transformed into a <code>.py</code> file.</p> <p>All the required tools are available by installing <code>pyside6</code>:</p> <ul> <li><code>Qt Designer</code>: <code>pyside6-designer</code></li> <li><code>.ui &gt; .py</code> Converter: <code>pyside6-uic</code>   At the project root (use full paths if relative doesn't work):   <pre><code>pyside6-uic assets/ui/settings.ui -o hd_active/ui/forms/settings_ui.py\n</code></pre></li> </ul>"},{"location":"#edit-ui-file","title":"Edit UI file","text":"<pre><code>inv ui.edit &lt;file&gt;\n\nex:\n  * inv ui.edit app.ui\n  * inv ui.edit app  # extension not required\n</code></pre>"},{"location":"#convert-ui-to-py","title":"Convert <code>.ui</code> to <code>.py</code>","text":"<pre><code>inv ui.py &lt;file&gt;  # `.ui` extension not required\n\n# Can be multiple files, comma separated\ninv ui.py &lt;file1&gt;,&lt;file2&gt;\n</code></pre>"},{"location":"#ide","title":"IDE","text":"<p>In most cases, the code editor used will be VS Code or PyCharm.</p> <p>In this case, PyCharm was used and some of its features are seen in the code in the form of comments that add functionality:</p> <ul> <li><code># noinspection</code>   PyCharm's internal linter and rule inspector checks for things that the linters used (<code>flake8</code>,   <code>mypy</code>, etc.) may not check and a warning appears in the IDE. That warning can be disabled with   the <code># noinspection &lt;inspection_name&gt;</code> directive.</li> <li><code># region</code>   The <code># region &lt;region_name&gt;</code> / <code># endregion</code> directives create a foldable block of code that makes   it easier to identify what that block is doing and hiding it when reading the code at a higher   level.</li> </ul>"},{"location":"#qt-installation","title":"Qt Installation","text":"<p>https://doc.qt.io/qt-6/get-and-install-qt.html</p> <p>For this project, installed the single developer open source (free) version.</p> <p>In the custom setup section, there's a Qt Installation Framework that is unchecked by default. Checked that box  to install that component, but at this point it's unclear whether that's necessary (still learning how to install a Qt app).</p> <p>See this video for more details.</p> <p>Takes a while to download and install.</p>"},{"location":"distribution/","title":"Executable / Distribution","text":"<p>How to create the executable file for the Qt app.</p>"},{"location":"distribution/#pyinstaller","title":"PyInstaller","text":"<p>Using PyInstaller.</p> <pre><code>inv build.dist\n</code></pre> <p>To check the actual <code>pyinstaller</code> command that is executed: <pre><code>inv --dry build.dist\n</code></pre></p> <p>This creates an executable file under the <code>dist</code> directory.</p> <p>The executable file is OS dependent, and it applies to the OS it's running under.</p> <p>The <code>.spec</code> file under <code>assets</code> is used to specify the options for the creation of the executable. To not use this spec file and instead create one with the default values, use the <code>--no-spec</code> option (<code>inv build.dist --no-spec</code>).</p> <p>The final file contains all the resources (images, etc.) used by the app.</p>"},{"location":"distribution/#qt-installer-framework","title":"Qt Installer Framework","text":"<p>Qt provides the Qt Installer Framework that builds a robust installer, however the Qt framework needs to be downloaded and installed.</p> <p>For now, this project uses PyInstaller only, but if you want to know more about the Qt Installer Framework, follow the links in this section.</p>"},{"location":"distribution/#install-qt-framework","title":"Install Qt Framework","text":"<p>https://doc.qt.io/qt-6/get-and-install-qt.html</p> <p>For this project, installed the single developer open source (free) version.</p> <p>In the custom setup section, there's a Qt Installation Framework that is unchecked by default. Checked that box  to install that component, but at this point it's unclear whether that's necessary (still learning how to install a Qt app).</p> <p>See this video for more details.</p> <p>Takes a while to download and install.</p>"},{"location":"learning-resources/","title":"Learning resources","text":"<p>Resources (courses, blogs, etc.) for further information on the different technologies used in this project.</p>"},{"location":"learning-resources/#qt","title":"Qt","text":"<ul> <li>PySide6 tutorial</li> <li>First steps with Qt Designer</li> <li>Qt Designer and Python: Build Your GUI Applications Faster   Free course from Real Python. Covers PySide 5 (6 is used in this project), but the concepts are   the same.</li> <li>Qt For Python (PySide6) GUI For Beginners : The Fundamentals   Paid course from Udemy, goes over the basics.   Very cheap, $13.99 with a coupon found on the internet at the time of this writing.</li> <li>Creating your first app with PySide6   Series of articles from PythonGUIs that go over several parts of Qt.</li> <li>Introduction to Qt<ul> <li>Reference: Qt Widgets</li> <li>Reference: Qt Widget class   and other API docs.   Type pyside6  in a browser search, ex pyside6 QPushButton <li>Qt Examples and Tutorials</li>"},{"location":"release/","title":"Release","text":"<p>This project uses GitHub CLI (docs) to manage releases.</p> <p>You'll need to install and authenticate <code>gh</code> in order to perform the release tasks.</p> <p>To install, download the file in the link above and follow the instructions.</p> <p>Authenticate with this command: <pre><code>gh auth login\n</code></pre></p> Sample output <p>Sample output from login with the <code>HTTPS</code> protocol and via web browser. <pre><code>gh auth login\n? What account do you want to log into? GitHub.com\n? What is your preferred protocol for Git operations on this host? HTTPS\n? Authenticate Git with your GitHub credentials? Yes\n? How would you like to authenticate GitHub CLI? Login with a web browser\n\n! First copy your one-time code: 9999-9999\nPress Enter to open github.com in your browser... \n\u2713 Authentication complete.\n- gh config set -h github.com git_protocol https\n\u2713 Configured git protocol\n\u2713 Logged in as &lt;GH username&gt;\n</code></pre></p> <p>You can authenticate in other ways, see docs for more info.</p>"},{"location":"release/#release","title":"Release","text":""},{"location":"release/#create-release","title":"Create release","text":"<ol> <li>Update (increase) the app version in <code>assets/app.yaml</code>.</li> <li>Create and merge a new PR called \"Preparing for v1.2.3\" release.    This merges the new version, which will be used to create the release and set it to the right    commit hash.</li> <li>Run <code>inv build.release</code>    Use the <code>--notes</code> or <code>--notes-file</code> to add more details to the release.  </li> </ol> <p>Recommended command</p> <p>Create the file <code>release_notes.md</code> and don't add it to the project.</p> <pre><code>inv build.release --notes-file release_notes.md\n</code></pre> <p>See sections below for beta and draft releases.</p>"},{"location":"release/#beta","title":"Beta","text":"<p>TODO</p>"},{"location":"release/#draft","title":"Draft","text":"<p>TODO</p>"},{"location":"release/#upload-artifacts","title":"Upload artifacts","text":"<p>TODO</p>"},{"location":"release/#more-info","title":"More info","text":"<p>Managing releases in a repository.</p>"},{"location":"tech-stack/","title":"Tech stack","text":"<p>Python packages and other technologies used throughout this project.</p>"},{"location":"tech-stack/#app","title":"App","text":""},{"location":"tech-stack/#semantic-versioning","title":"Semantic versioning","text":"<p><code>semantic-version</code>: https://github.com/rbarrois/python-semanticversion</p>"},{"location":"tech-stack/#yaml","title":"YAML","text":"<p><code>pyyaml</code>: https://pyyaml.org</p> <p>While this package is not included in the Python distribution, it's pretty standard when dealing with YAML files.</p> <p>In this project, there are three main reasons YAML is used instead of JSON:</p> <ul> <li>Comments.   YAML files can have comments, which can be very useful.   <pre><code># Comment on a YAML file\nsome_value: True  # Inline comments also supported\n</code></pre></li> <li>Multiline.   YAML allows for multiline entries.   <pre><code>key_1: &gt;\n  This is a simple line.\n  This multiline text will\n  transform into a single line.\nkey_2: |\n  This is a simple line.\n  This text will retain\n  its original newlines.\n</code></pre></li> <li>Legibility.   YAML is usually less verbose than JSON, making it more readable.</li> </ul>"},{"location":"tech-stack/#development","title":"Development","text":""},{"location":"tech-stack/#tasks","title":"Tasks","text":"<p><code>pyinvoke</code>: main page | docs | GitHub</p> <p>This project uses <code>pyinvoke</code> to facilitate executing miscellaneous tasks that help with development.</p> <p>If you're familiar with <code>make</code> and <code>makefiles</code>, this does a similar thing, but all in Python.</p>"},{"location":"tech-stack/#using-invoke","title":"Using invoke","text":"<p>After the installing the dev requirements (which include <code>invoke</code>), try the commands below.</p> <p>List all available tasks: <pre><code>inv --list\n</code></pre></p> <p>Tasks are grouped (those that have a <code>.</code>). To see all the lint tasks: <pre><code>inv --list lint\n</code></pre></p> <p>Help with a certain task: <pre><code>inv --help pip.package\n</code></pre></p> <p>Use <code>--dry</code> to see what the task does without executing it.</p>"},{"location":"tech-stack/#debugging-tasks","title":"Debugging tasks","text":"<p>To debug <code>tasks.py</code> (the file used by <code>invoke</code>), either add a <code>breakpoint()</code> statement or, if using an IDE (in this example PyCharm), use the configuration below to allow setting breakpoints in the code and debug <code>tasks.py</code> as any other Python file.</p> <p></p>"},{"location":"tech-stack/#documentation","title":"Documentation","text":"<p><code>mkdocs</code>: https://www.mkdocs.org <code>mkdocs-material</code>: https://squidfunk.github.io/mkdocs-material</p> <p>MkDocs generates a static website from MarkDown (<code>.mk</code>) files and the theme Material adds a lot of other functionality.</p> <p>There are other packages (see <code>requirements-docs.in</code>) to enhance behavior and configuration is in <code>mkdocs.yml</code>.</p> <p><code>inv --list docs</code> to get a list of tasks related to documentation.</p>"},{"location":"test/","title":"Test","text":"<p>Tests use pytest and the pytest-qt plugin (documentation here).</p> <p>Also see the QTest API for more info.</p> <p>These test the UI by simulating user interaction.</p> <p><code>pytest-qt</code> supplies the <code>qtbot</code> fixture, which is not required to be used, but keeps track of the widget and will ensure that it gets closed by the end of the test, so it is highly recommended.</p> <p>Note</p> <p>The tests in this project are not meant to be comprehensive, rather to be used as examples on how to do tests for Qt apps using pytest.</p>"},{"location":"test/#running-the-unit-tests","title":"Running the unit tests","text":"<p>If using an IDE such as PyCharm or VS Code, the tests can be executed from within the IDE.</p> <p>To run via CLI: <pre><code>pytest .\n</code></pre> or <pre><code>python -m pytest .\n</code></pre></p> <p>Pytest options are in <code>pyproject.toml</code>, in the <code>[tool.pytest.ini_options]</code> section.</p>"},{"location":"test/#testing-app-update","title":"Testing app update","text":"<p>TODO: More instructions here. <pre><code>.\\dist\\qt_playground.exe --check-update-only --log-level debug --update-manifest \"./dist_test/app.yaml\" --update-file \"./dist_test/qt_playground_101.exe\"\n</code></pre></p>"},{"location":"ui/","title":"UI","text":"<p>Guidelines on building UI with Qt Designer.</p> <p>The Qt Designer functionality is also available in Qt Creator, but in this project we're only using Qt Designer and not referencing Qt Creator.</p>"},{"location":"ui/#edit-ui-files","title":"Edit <code>.ui</code> files","text":"<p>Edit files in Qt Designer: <pre><code>inv ui.edit &lt;file&gt;\n</code></pre> If using PyCharm, can also dbl click the <code>.ui</code> file from the Project window.</p>"},{"location":"ui/#compileconvert-to-py","title":"Compile/convert to <code>.py</code>","text":"<p><code>.ui</code> files can be loaded at runtime using <code>QUiLoader</code>, but this has a performance hit as the <code>.ui</code> file needs to be interpreted each time the app is executed.</p> <p>Compiling/converting the <code>.ui</code> file into a python (<code>.py</code>) file is the preferred method for production environments.</p> <pre><code>inv ui.py &lt;file&gt;\n</code></pre> <p>Warning</p> <p>The <code>.py</code> files may be generated in a different encoding from that of other python files in the project that can cause errors like:</p> <p>https://stackoverflow.com/questions/31233777/python-source-code-string-cannot-contain-null-bytes</p> <p>They may be generated in UTF-16 while other python files are in UTF-8.</p> <p>The encoding can be checked and changed in the IDE.</p>"},{"location":"ui/#guidelines","title":"Guidelines","text":"<p>Remember to give meaningful names to all objects in Qt Designer as these will be used in code.</p> <p>Warning</p> <p>If changing object names in Qt Designer, the code needs to be updated manually to that same name.</p> <p>Particularly the top level widget in the form as that's going to be the name of the class being imported in Python.</p> <p>Sample names with suggested naming convention:</p> <ul> <li>UI file: <code>user_form.ui</code>   This should be the Snake Case version of the form name (which is Pascal Case) in order to   conform with Python's modules (files) naming convention.</li> <li>Top level form name in UI file: <code>UserForm</code>   These should be Pascal Case (capitalize first letter of each word, no spaces).</li> <li>Python file: <code>ui_user_form.py</code></li> <li> <p>Class name in Python file: <code>Ui_UserForm</code>, autogenerated by <code>pyside6-uic</code>.   This follows the pattern <code>Ui_&lt;top level form name&gt;</code>.   The Python class name is defined in the <code>.ui</code> file (which is a XML file) in <code>&lt;widget&gt;</code>, ex.   <pre><code>&lt;widget class=\"QWidget\" name=\"UserForm\"&gt;\n</code></pre></p> <p>Note</p> <p><code>pyside6-uic</code> does not support specifying the class name.</p> <p>Always follows the pattern above.</p> </li> </ul> <ul> <li>Custom class file: <code>user_form.py</code></li> <li>Custom class name: <code>UserForm</code></li> </ul>"},{"location":"ui/#recap-on-ui-files","title":"Recap on UI files","text":"<ul> <li><code>user_form.ui</code> Generated by Qt Designer.   Top level form name should be <code>UserForm</code>.</li> <li><code>ui_user_form.py</code> Generated by <code>pyside6-uic</code> when converting the <code>.ui</code> file to <code>.py</code>.   Class name is <code>Ui_UserForm</code>.</li> <li><code>user_form.py</code> Our own python file with a class inheriting from the generated one.   Class name should be <code>UserForm</code>.</li> </ul>"},{"location":"ui/#resource-files","title":"Resource files","text":"<p>Qt resource files are created in Qt Designer or Qt Creator and have a <code>.qrc</code> extension. These files can be used by different projects (<code>.ui</code> files) but changes in one place will affect everywhere.</p> <p>They are converted to <code>.py</code> using <code>pyside6-rcc</code>. Binaries included as a binary string.</p> <p>Notes:</p> <ul> <li>The <code>.py</code> resource files should have <code>_rc</code> appended in the name.   Ex, <code>user_form.qrc</code> should be converted to <code>user_form_rc.py</code>.</li> <li>The <code>.py</code> resource file (<code>*_rc.py</code>) needs to live in the same folder as the <code>ui_*.py</code> file   (generated with <code>pyside-uic</code>).</li> <li>If the <code>.py</code> files are not in the project's root (which is the common situation), then the flag   <code>--from-imports</code> needs to be used in <code>pyside-uic</code> when generating the <code>ui_*.py</code> file.</li> <li>Working with resources in Qt Creator is slightly different from Qt Designer, but the flow is the   same and everything is similar.   In Qt Creator there's the concept of Project and the resource file needs to first be associated   with the project to then be used in the <code>.ui</code> file.</li> <li>The file <code>assets/images/button.gif</code> is included in the app as an external resource file for demo   purposes.</li> </ul> <p>Note</p> <p>SVG files may not work on some machines if the required dependencies are not installed. For that reason, working only with PNG, ICO, GIF and JPG files.</p> <p>For a list of supported formats in the current machine:</p> <pre><code>from PySide6.QtGui import QImageReader\n\nfor x in QImageReader.supportedImageFormats():\n    print(x.toStdString())\n</code></pre>"},{"location":"update/","title":"Update","text":"<p>There's an update functionality where the app checks if an update is available and updates itself if needed.</p> <p>Notes:</p> <ul> <li>All code is included.   No external dependencies or extra scripts required.</li> <li>Transparent for users.</li> <li>Can update without running the UI (to run as script).</li> <li>Code can easily be modified to check for updates from S3, http, etc.   Currently checking locally.</li> </ul>"},{"location":"update/#update-mechanism","title":"Update mechanism","text":"<p>This mechanism copies the new file to the current one by taking advantage of the fact that a file currently in use cannot be overwritten but can be renamed.</p> <p>The update flow is:</p> <ol> <li>Rename file currently running to <code>*.bak_&lt;timestamp&gt;</code></li> <li>Copy new file to where the currently running file was prior to rename.</li> </ol> <p>Next time the app runs, will be with the new version.</p> <p>Sample output from the update flow: <pre><code>INFO:root:Updating to version 1.0.1.\nDEBUG:root:Updating file C:\\Users\\joaon\\code\\qt_playground\\dist\\qt_playground.exe\nDEBUG:root:Backing up file to C:\\Users\\joaon\\code\\qt_playground\\dist\\qt_playground.bak_1719096410\nDEBUG:root:Copying new version from C:\\Users\\joaon\\code\\qt_playground\\dist_test\\qt_playground_101.exe\nINFO:root:Update was successful and the new version will be used the next time the app runs.\n</code></pre></p>"},{"location":"update/#updating","title":"Updating","text":"<p>For the normal update flow, simply run the UI app and it will update before exiting. <code>--update-manifest</code> and <code>--update-file</code> need to be set.</p> <p>To update via CLI without showing the UI: Note: Example below is for PowerShell. Use <code>\\</code> as line separator for Mac and Linux CLI. <pre><code>.\\qt_playground.exe `\n--check-update-only `\n--log-level debug `\n--update-manifest \"../dist_test/app.yaml\" `\n--update-file \"../dist_test/qt_playground_101.exe\"\n</code></pre></p> <p>To update:</p> <ol> <li>Create a newer version of the app.<ol> <li>Update <code>assets/app.yaml &gt; version</code> to a higher value.</li> <li>Build the distributable file with <code>inv build.dist</code>     This creates a file under the <code>dist</code> directory with the name set in     <code>assets/pyinstaller.spec &gt; exe &gt; name</code> (<code>qt_playground</code> is what is currently set to).</li> </ol> </li> <li>Copy that newer version file to a separate directory, ex. <code>dist_test</code>.    The file can be left in the same folder, but running <code>inv build.dist</code> deletes the contents of    <code>dist</code>, so it's best to move it somewhere else.</li> <li>Run the current version with the <code>--update-manifest</code> and <code>--update-file</code> options set.    See example above.</li> </ol>"},{"location":"update/#checking-app-version","title":"Checking app version","text":"<p>There are two ways to check the app version:</p> <ul> <li>CLI: <code>qt_playground --version</code></li> <li>UI:  Help &gt; About</li> </ul>"},{"location":"update/#debugging-options","title":"Debugging options","text":"<p>The options below are available as environment variables for debugging purposes.</p> <p>Set them to <code>True</code> or <code>1</code> in the environment to enable them.</p> <ul> <li><code>IGNORE_BUNDLED_APP</code>   Do not check if the code is running as a bundled app (an executable) or a python script.   Ie, code that is supposed to execute only as a bundled app will run as script also.</li> <li><code>QT_PLAYGROUND_IGNORE_UPDATE</code>   Do not perform an app update (and backup), even if one is available.   See also the <code>check-update</code> and <code>check-update-only</code> CLI options.</li> </ul>"}]}